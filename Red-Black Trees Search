class RBTreeNode {
    int value;
    boolean isBlack;
    RBTreeNode left, right, parent;

    public RBTreeNode(int value) {
        this.value = value;
        this.isBlack = false; // New nodes are initially red
        this.left = null;
        this.right = null;
        this.parent = null;
    }
}

class RedBlackTree {
    private RBTreeNode root;

    public RedBlackTree() {
        root = null;
    }

    // Search operation
    public RBTreeNode search(int value) {
        return searchRecursive(root, value);
    }

    private RBTreeNode searchRecursive(RBTreeNode node, int value) {
        if (node == null || node.value == value) {
            return node;
        }

        if (value < node.value) {
            return searchRecursive(node.left, value);
        } else {
            return searchRecursive(node.right, value);
        }
    }

    // Insert nodes to build the tree (this is a simplified version)
    public void insert(int value) {
        root = insertRecursive(root, value, null);
    }

    private RBTreeNode insertRecursive(RBTreeNode node, int value, RBTreeNode parent) {
        if (node == null) {
            RBTreeNode newNode = new RBTreeNode(value);
            newNode.parent = parent;
            return newNode;
        }

        if (value < node.value) {
            node.left = insertRecursive(node.left, value, node);
        } else if (value > node.value) {
            node.right = insertRecursive(node.right, value, node);
        }

        return node;
    }

    // Additional methods like fixing violations, rotations, etc., are omitted for simplicity
}

public class RedBlackTreeSearch {
    public static void main(String[] args) {
        RedBlackTree tree = new RedBlackTree();

        // Inserting nodes to construct the tree
        tree.insert(7);
        tree.insert(3);
        tree.insert(18);
        tree.insert(1);
        tree.insert(5);
        tree.insert(13);
        tree.insert(21);

        // Search for the value 13
        RBTreeNode result = tree.search(13);

        if (result != null) {
            System.out.println("Node with value 13 found: " + result.value);
        } else {
            System.out.println("Node with value 13 not found.");
        }
    }
}

