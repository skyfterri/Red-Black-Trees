public class RedBlackTree {
    private static final boolean RED = true;
    private static final boolean BLACK = false;

    static class Node {
        int key;
        Node left, right;
        boolean color;

        public Node(int key) {
            this.key = key;
            this.color = RED; // Newly inserted node is always red
        }
    }

    private Node root;

    public RedBlackTree() {
        this.root = null;
    }

    // Insertion methods
    public void insert(int key) {
        root = insertRec(root, key); // Recursive insertion
        root.color = BLACK; // Root must always be black
    }

    private Node insertRec(Node root, int key) {
        if (root == null)
            return new Node(key);

        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        // Perform rotations and recoloring if necessary
        if (isRed(root.right) && !isRed(root.left)) // Right-leaning red link
            root = rotateLeft(root);
        if (isRed(root.left) && isRed(root.left.left)) // Consecutive red links
            root = rotateRight(root);
        if (isRed(root.left) && isRed(root.right)) // Split 4-node
            flipColors(root);

        return root;
    }

    private boolean isRed(Node node) {
        return node != null && node.color == RED;
    }

    private Node rotateLeft(Node node) {
        Node temp = node.right;
        node.right = temp.left;
        temp.left = node;
        temp.color = node.color;
        node.color = RED;
        return temp;
    }

    private Node rotateRight(Node node) {
        Node temp = node.left;
        node.left = temp.right;
        temp.right = node;
        temp.color = node.color;
        node.color = RED;
        return temp;
    }

    private void flipColors(Node node) {
        node.color = RED;
        node.left.color = BLACK;
        node.right.color = BLACK;
    }

    // Deletion methods
    public void delete(int key) {
        root = deleteRec(root, key); // Recursive deletion
        if (root != null)
            root.color = BLACK; // Root must always be black after deletion
    }

    private Node deleteRec(Node root, int key) {
        if (root == null)
            return null;

        if (key < root.key)
            root.left = deleteRec(root.left, key);
        else if (key > root.key)
            root.right = deleteRec(root.right, key);
        else {
            if (root.left == null) // Node with only one child or no child
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            root.key = minValue(root.right);
            root.right = deleteRec(root.right, root.key);
        }

        // Fix the tree after deletion
        return fixAfterDeletion(root);
    }

    private int minValue(Node node) {
        int min = node.key;
        while (node.left != null) {
            min = node.left.key;
            node = node.left;
        }
        return min;
    }

    private Node fixAfterDeletion(Node root) {
        if (isRed(root.left) && !isRed(root.right))
            root = rotateRight(root);
        if (isRed(root.right))
            root = rotateLeft(root);
        if (isRed(root.left) && isRed(root.right))
            flipColors(root);

        return root;
    }

    // Utility methods
    public void inorderTraversal() {
        inorderTraversal(root);
    }

    private void inorderTraversal(Node root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.key + " ");
            inorderTraversal(root.right);
        }
    }

    public static void main(String[] args) {
        RedBlackTree tree = new RedBlackTree();

        // Insertions
        tree.insert(10);
        tree.insert(20);
        tree.insert(30);
        tree.insert(40);
        tree.insert(50);

        System.out.println("Inorder Traversal after insertions:");
        tree.inorderTraversal(); // Should print sorted keys: 10 20 30 40 50

        // Deletion
        System.out.println("\n\nDeleting 20:");
        tree.delete(20);

        System.out.println("Inorder Traversal after deletion:");
        tree.inorderTraversal(); // Should print sorted keys: 10 30 40 50
    }

}
